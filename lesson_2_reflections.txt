What happens when you initialize a repository? Why do you need to do it?

Some metadata in a subdirectory is created. I need to do this because it tells git to create an repository and make it possible to track file changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is connected to the working directory and the repository, in a way that it is kind of a middle part. Files to be added
to the repository must be in the working directory. By the commit command they are made part of the repository.

How can you use the staging area to make sure you have one commit per logical change?

I can review my changes before i commit them via the command "git diff --staged" and make sure that i obey to this rule.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Some situations where branches would help are when i want to test an experimental feature but keep a working version at the same time, or when i want to
create a different version of a program, for example a dutch version or an easy mode version of a game. Branches would help by keeping a better view on
the different versions of my programs, so i would not get confused as easily as without branches.

How do the diagrams help you visualize the branch structure?

The diagrams help me by showing me an easy to understand visualisazion of my branch structure. By making a diagram i get a good overview of my branches
and am less in danger to get confused when there are many branches in the commit history.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is that the changes made in both branches are now part of a single branch. They are now sorted in this branch
via timestamp. We represent in in the diagram the way we do to show the parents of each commit, because git stores this information as well and it makes
it easier to compare different commits and to unterstand the differences between them.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging makes things easier often, because it saves much time. If there is no difficult situation to merge there are no real cons. On the pro side of
doing everything manual is, of course, the fact that you have full control of the merge.
